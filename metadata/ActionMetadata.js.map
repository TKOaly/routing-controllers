{"version":3,"sources":["../../src/metadata/ActionMetadata.ts"],"names":[],"mappings":"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","file":"ActionMetadata.js","sourcesContent":["import {Action} from \"../Action\";\r\nimport {ActionMetadataArgs} from \"./args/ActionMetadataArgs\";\r\nimport {ActionType} from \"./types/ActionType\";\r\nimport {ClassTransformOptions} from \"class-transformer\";\r\nimport {ControllerMetadata} from \"./ControllerMetadata\";\r\nimport {InterceptorMetadata} from \"./InterceptorMetadata\";\r\nimport {ParamMetadata} from \"./ParamMetadata\";\r\nimport {ResponseHandlerMetadata} from \"./ResponseHandleMetadata\";\r\nimport { RoutingControllersOptions } from \"../RoutingControllersOptions\";\r\nimport {UseMetadata} from \"./UseMetadata\";\r\n\r\n/**\r\n * Action metadata.\r\n */\r\nexport class ActionMetadata {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Action's controller.\r\n     */\r\n    controllerMetadata: ControllerMetadata;\r\n\r\n    /**\r\n     * Action's parameters.\r\n     */\r\n    params: ParamMetadata[];\r\n\r\n    /**\r\n     * Action's use metadatas.\r\n     */\r\n    uses: UseMetadata[];\r\n\r\n    /**\r\n     * Action's use interceptors.\r\n     */\r\n    interceptors: InterceptorMetadata[];\r\n\r\n    /**\r\n     * Class on which's method this action is attached.\r\n     */\r\n    target: Function;\r\n\r\n    /**\r\n     * Object's method that will be executed on this action.\r\n     */\r\n    method: string;\r\n\r\n    /**\r\n     * Action type represents http method used for the registered route. Can be one of the value defined in ActionTypes\r\n     * class.\r\n     */\r\n    type: ActionType;\r\n\r\n    /**\r\n     * Route to be registered for the action.\r\n     */\r\n    route: string | RegExp;\r\n\r\n    /**\r\n     * Full route to this action (includes controller base route).\r\n     */\r\n    fullRoute: string | RegExp;\r\n\r\n    /**\r\n     * Indicates if this action uses Body.\r\n     */\r\n    isBodyUsed: boolean;\r\n\r\n    /**\r\n     * Indicates if this action uses Uploaded File.\r\n     */\r\n    isFileUsed: boolean;\r\n\r\n    /**\r\n     * Indicates if this action uses Uploaded Files.\r\n     */\r\n    isFilesUsed: boolean;\r\n\r\n    /**\r\n     * Indicates if controller of this action is json-typed.\r\n     */\r\n    isJsonTyped: boolean;\r\n\r\n    /**\r\n     * Indicates if this action uses Authorized decorator.\r\n     */\r\n    isAuthorizedUsed: boolean;\r\n\r\n    /**\r\n     * Class-transformer options for the action response content.\r\n     */\r\n    responseClassTransformOptions: ClassTransformOptions;\r\n\r\n    /**\r\n     * Http code to be used on undefined action returned content.\r\n     */\r\n    undefinedResultCode: number | Function;\r\n\r\n    /**\r\n     * Http code to be used on null action returned content.\r\n     */\r\n    nullResultCode: number | Function;\r\n\r\n    /**\r\n     * Http code to be set on successful response.\r\n     */\r\n    successHttpCode: number;\r\n\r\n    /**\r\n     * Specifies redirection url for this action.\r\n     */\r\n    redirect: string;\r\n\r\n    /**\r\n     * Rendered template to be used for this controller action.\r\n     */\r\n    renderedTemplate: string;\r\n\r\n    renderOrRedirect: string;\r\n\r\n    /**\r\n     * Response headers to be set.\r\n     */\r\n    headers: { [name: string]: any };\r\n\r\n    /**\r\n     * Extra options used by @Body decorator.\r\n     */\r\n    bodyExtraOptions: any;\r\n\r\n    /**\r\n     * Roles set by @Authorized decorator.\r\n     */\r\n    authorizedRoles: any[];\r\n\r\n    /**\r\n     * Params to be appended to the method call.\r\n     */\r\n    appendParams?: (action: Action) => any[];\r\n\r\n    /**\r\n     * Special function that will be called instead of orignal method of the target.\r\n     */\r\n    methodOverride?: (actionMetadata: ActionMetadata, action: Action, params: any[]) => Promise<any> | any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(controllerMetadata: ControllerMetadata, args: ActionMetadataArgs, private options: RoutingControllersOptions) {\r\n        this.controllerMetadata = controllerMetadata;\r\n        this.route = args.route;\r\n        this.target = args.target;\r\n        this.method = args.method;\r\n        this.type = args.type;\r\n        this.appendParams = args.appendParams;\r\n        this.methodOverride = args.methodOverride;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds everything action metadata needs.\r\n     * Action metadata can be used only after its build.\r\n     */\r\n    build(responseHandlers: ResponseHandlerMetadata[]) {\r\n        const classTransformerResponseHandler = responseHandlers.find(handler => handler.type === \"response-class-transform-options\");\r\n        const undefinedResultHandler = responseHandlers.find(handler => handler.type === \"on-undefined\");\r\n        const nullResultHandler = responseHandlers.find(handler => handler.type === \"on-null\");\r\n        const successCodeHandler = responseHandlers.find(handler => handler.type === \"success-code\");\r\n        const redirectHandler = responseHandlers.find(handler => handler.type === \"redirect\");\r\n        const renderedTemplateHandler = responseHandlers.find(handler => handler.type === \"rendered-template\");\r\n        const authorizedHandler = responseHandlers.find(handler => handler.type === \"authorized\");\r\n        const contentTypeHandler = responseHandlers.find(handler => handler.type === \"content-type\");\r\n        const bodyParam = this.params.find(param => param.type === \"body\");\r\n        const renderOrRedirect = responseHandlers.find(handler => handler.type === \"render-or-redirect\");\r\n\r\n        if (classTransformerResponseHandler)\r\n            this.responseClassTransformOptions = classTransformerResponseHandler.value;\r\n        \r\n        this.undefinedResultCode = undefinedResultHandler\r\n            ? undefinedResultHandler.value\r\n            : this.options.defaults && this.options.defaults.undefinedResultCode;\r\n        \r\n        this.nullResultCode = nullResultHandler\r\n            ? nullResultHandler.value\r\n            : this.options.defaults && this.options.defaults.nullResultCode;\r\n        \r\n        if (successCodeHandler)\r\n            this.successHttpCode = successCodeHandler.value;\r\n        if (redirectHandler)\r\n            this.redirect = redirectHandler.value;\r\n        if (renderedTemplateHandler)\r\n            this.renderedTemplate = renderedTemplateHandler.value;\r\n        if (renderOrRedirect)\r\n            this.renderOrRedirect = renderOrRedirect.value;\r\n\r\n        this.bodyExtraOptions = bodyParam ? bodyParam.extraOptions : undefined;\r\n        this.isBodyUsed = !!this.params.find(param => param.type === \"body\" || param.type === \"body-param\");\r\n        this.isFilesUsed = !!this.params.find(param => param.type === \"files\");\r\n        this.isFileUsed = !!this.params.find(param => param.type === \"file\");\r\n        this.isJsonTyped = (contentTypeHandler !== undefined \r\n            ? /json/.test(contentTypeHandler.value)\r\n            : this.controllerMetadata.type === \"json\"\r\n        );\r\n        this.fullRoute = this.buildFullRoute();\r\n        this.headers = this.buildHeaders(responseHandlers);\r\n\r\n        this.isAuthorizedUsed = this.controllerMetadata.isAuthorizedUsed || !!authorizedHandler;\r\n        this.authorizedRoles = (this.controllerMetadata.authorizedRoles || []).concat((authorizedHandler && authorizedHandler.value) || []);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds full action route.\r\n     */\r\n    private buildFullRoute(): string | RegExp {\r\n        if (this.route instanceof RegExp) {\r\n            if (this.controllerMetadata.route) {\r\n                return ActionMetadata.appendBaseRoute(this.controllerMetadata.route, this.route);\r\n            }\r\n            return this.route;\r\n        }\r\n\r\n        let path: string = \"\";\r\n        if (this.controllerMetadata.route) path += this.controllerMetadata.route;\r\n        if (this.route && typeof this.route === \"string\") path += this.route;\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Builds action response headers.\r\n     */\r\n    private buildHeaders(responseHandlers: ResponseHandlerMetadata[]) {\r\n        const contentTypeHandler = responseHandlers.find(handler => handler.type === \"content-type\");\r\n        const locationHandler = responseHandlers.find(handler => handler.type === \"location\");\r\n\r\n        const headers: { [name: string]: string } = {};\r\n        if (locationHandler)\r\n            headers[\"Location\"] = locationHandler.value;\r\n\r\n        if (contentTypeHandler)\r\n            headers[\"Content-type\"] = contentTypeHandler.value;\r\n\r\n        const headerHandlers = responseHandlers.filter(handler => handler.type === \"header\");\r\n        if (headerHandlers)\r\n            headerHandlers.map(handler => headers[handler.value] = handler.secondaryValue);\r\n\r\n        return headers;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Calls action method.\r\n     * Action method is an action defined in a user controller.\r\n     */\r\n    callMethod(params: any[]) {\r\n        const controllerInstance = this.controllerMetadata.instance;\r\n        return controllerInstance[this.method].apply(controllerInstance, params);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Appends base route to a given regexp route.\r\n     */\r\n    static appendBaseRoute(baseRoute: string, route: RegExp|string) {\r\n        const prefix = `${baseRoute.length > 0 && baseRoute.indexOf(\"/\") < 0 ? \"/\" : \"\"}${baseRoute}`;\r\n        if (typeof route === \"string\")\r\n            return `${prefix}${route}`;\r\n\r\n        if (!baseRoute || baseRoute === \"\") return route;\r\n\r\n        const fullPath = `^${prefix}${route.toString().substr(1)}?$`;\r\n        \r\n        return new RegExp(fullPath, route.flags);\r\n    }\r\n\r\n}"],"sourceRoot":".."}