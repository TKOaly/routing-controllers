{"version":3,"sources":["../../src/metadata/ParamMetadata.ts"],"names":[],"mappings":";;AAOA;;GAEG;AACH;IAwFI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,uBAAY,cAA8B,EAAE,IAAuB;QAnDnE;;WAEG;QACH,eAAU,GAAW,EAAE,CAAC;QAExB;;WAEG;QACH,mBAAc,GAAY,KAAK,CAAC;QA4C5B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QAErC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC1C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE9B,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;QACxC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAM,UAAU,GAAI,OAAe,CAAC,WAAW,CAAC,mBAAmB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/F,EAAE,CAAC,CAAC,OAAO,UAAU,KAAK,WAAW,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7C,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,YAAY,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC9D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAEzD,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;YACpD,CAAC;YACD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,YAAY,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,QAAQ,CAAC;QAC5G,CAAC;IACL,CAAC;IAEL,oBAAC;AAAD,CA/HA,AA+HC,IAAA;AA/HY,sCAAa","file":"ParamMetadata.js","sourcesContent":["import {ValidatorOptions} from \"class-validator\";\r\nimport {ActionMetadata} from \"./ActionMetadata\";\r\nimport {ParamMetadataArgs} from \"./args/ParamMetadataArgs\";\r\nimport {ParamType} from \"./types/ParamType\";\r\nimport {ClassTransformOptions} from \"class-transformer\";\r\nimport {Action} from \"../Action\";\r\n\r\n/**\r\n * Action Parameter metadata.\r\n */\r\nexport class ParamMetadata {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Parameter's action.\r\n     */\r\n    actionMetadata: ActionMetadata;\r\n\r\n    /**\r\n     * Object on which's method's parameter this parameter is attached.\r\n     */\r\n    object: any;\r\n\r\n    /**\r\n     * Method on which's parameter is attached.\r\n     */\r\n    method: string;\r\n\r\n    /**\r\n     * Index (# number) of the parameter in the method signature.\r\n     */\r\n    index: number;\r\n\r\n    /**\r\n     * Parameter type.\r\n     */\r\n    type: ParamType;\r\n\r\n    /**\r\n     * Parameter name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Parameter target type.\r\n     */\r\n    targetType?: any;\r\n\r\n    /**\r\n     * Parameter target type's name in lowercase.\r\n     */\r\n    targetName: string = \"\";\r\n\r\n    /**\r\n     * Indicates if target type is an object.\r\n     */\r\n    isTargetObject: boolean = false;\r\n\r\n    /**\r\n     * Parameter target.\r\n     */\r\n    target: any;\r\n\r\n    /**\r\n     * Specifies if parameter should be parsed as json or not.\r\n     */\r\n    parse: boolean;\r\n\r\n    /**\r\n     * Indicates if this parameter is required or not\r\n     */\r\n    required: boolean;\r\n\r\n    /**\r\n     * Transforms the value.\r\n     */\r\n    transform: (action: Action, value?: any) => Promise<any>|any;\r\n\r\n    /**\r\n     * Additional parameter options.\r\n     * For example it can be uploader middleware options or body-parser middleware options.\r\n     */\r\n    extraOptions: any;\r\n\r\n    /**\r\n     * Class transform options used to perform plainToClass operation.\r\n     */\r\n    classTransform?: ClassTransformOptions;\r\n\r\n    /**\r\n     * If true, class-validator will be used to validate param object.\r\n     * If validation options are given then it means validation will be applied (is true).\r\n     */\r\n    validate?: boolean|ValidatorOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(actionMetadata: ActionMetadata, args: ParamMetadataArgs) {\r\n        this.actionMetadata = actionMetadata;\r\n\r\n        this.target = args.object.constructor;\r\n        this.method = args.method;\r\n        this.extraOptions = args.extraOptions;\r\n        this.index = args.index;\r\n        this.type = args.type;\r\n        this.name = args.name;\r\n        this.parse = args.parse;\r\n        this.required = args.required;\r\n        this.transform = args.transform;\r\n        this.classTransform = args.classTransform;\r\n        this.validate = args.validate;\r\n        \r\n        if (args.explicitType) {\r\n            this.targetType = args.explicitType;\r\n        } else {\r\n            const ParamTypes = (Reflect as any).getMetadata(\"design:paramtypes\", args.object, args.method);\r\n            if (typeof ParamTypes !== \"undefined\") {\r\n                this.targetType = ParamTypes[args.index];\r\n            }\r\n        }\r\n\r\n        if (this.targetType) {\r\n            if (this.targetType instanceof Function && this.targetType.name) {\r\n                this.targetName = this.targetType.name.toLowerCase();\r\n\r\n            } else if (typeof this.targetType === \"string\") {\r\n                this.targetName = this.targetType.toLowerCase();\r\n            }\r\n            this.isTargetObject = this.targetType instanceof Function || this.targetType.toLowerCase() === \"object\";\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}