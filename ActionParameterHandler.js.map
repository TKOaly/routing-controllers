{"version":3,"sources":["../../src/ActionParameterHandler.ts"],"names":[],"mappings":"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","file":"ActionParameterHandler.js","sourcesContent":["import {plainToClass} from \"class-transformer\";\r\nimport {validateOrReject as validate, ValidationError} from \"class-validator\";\r\nimport {Action} from \"./Action\";\r\nimport {BadRequestError} from \"./http-error/BadRequestError\";\r\nimport {BaseDriver} from \"./driver/BaseDriver\";\r\nimport {ParameterParseJsonError} from \"./error/ParameterParseJsonError\";\r\nimport {ParamMetadata} from \"./metadata/ParamMetadata\";\r\nimport {ParamRequiredError} from \"./error/ParamRequiredError\";\r\nimport {AuthorizationRequiredError} from \"./error/AuthorizationRequiredError\";\r\nimport {CurrentUserCheckerNotDefinedError} from \"./error/CurrentUserCheckerNotDefinedError\";\r\nimport {isPromiseLike} from \"./util/isPromiseLike\";\r\n\r\n/**\r\n * Handles action parameter.\r\n */\r\nexport class ActionParameterHandler<T extends BaseDriver> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private driver: T) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Handles action parameter.\r\n     */\r\n    handle(action: Action, param: ParamMetadata): Promise<any>|any {\r\n\r\n        if (param.type === \"request\")\r\n            return action.request;\r\n\r\n        if (param.type === \"response\")\r\n            return action.response;\r\n\r\n        if (param.type === \"context\")\r\n            return action.context;\r\n\r\n        // get parameter value from request and normalize it\r\n        const value = this.normalizeParamValue(this.driver.getParamFromRequest(action, param), param);\r\n        if (isPromiseLike(value))\r\n            return value.then(value => this.handleValue(value, action, param));\r\n\r\n        return this.handleValue(value, action, param);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Handles non-promise value.\r\n     */\r\n    protected handleValue(value: any, action: Action, param: ParamMetadata): Promise<any>|any {\r\n\r\n        // if transform function is given for this param then apply it\r\n        if (param.transform)\r\n            value = param.transform(action, value);\r\n\r\n        // if its current-user decorator then get its value\r\n        if (param.type === \"current-user\") {\r\n            if (!this.driver.currentUserChecker)\r\n                throw new CurrentUserCheckerNotDefinedError();\r\n\r\n            value = this.driver.currentUserChecker(action);\r\n        }\r\n\r\n        // check cases when parameter is required but its empty and throw errors in this case\r\n        if (param.required) {\r\n            const isValueEmpty = value === null || value === undefined || value === \"\";\r\n            const isValueEmptyObject = value instanceof Object && Object.keys(value).length === 0;\r\n\r\n            if (param.type === \"body\" && !param.name && (isValueEmpty || isValueEmptyObject)) { // body has a special check and error message\r\n                return Promise.reject(new ParamRequiredError(action, param));\r\n\r\n            } else if (param.type === \"current-user\") { // current user has a special check as well\r\n\r\n                if (isPromiseLike(value)) {\r\n                    return value.then(currentUser => {\r\n                        if (!currentUser)\r\n                            return Promise.reject(new AuthorizationRequiredError(action));\r\n\r\n                        return currentUser;\r\n                    });\r\n\r\n                } else {\r\n                    if (!value)\r\n                        return Promise.reject(new AuthorizationRequiredError(action));\r\n                }\r\n\r\n            } else if (param.name && isValueEmpty) { // regular check for all other parameters // todo: figure out something with param.name usage and multiple things params (query params, upload files etc.)\r\n                return Promise.reject(new ParamRequiredError(action, param));\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Normalizes parameter value.\r\n     */\r\n    protected normalizeParamValue(value: any, param: ParamMetadata): Promise<any>|any {\r\n        if (value === null || value === undefined)\r\n            return value;\r\n\r\n        switch (param.targetName) {\r\n            case \"number\":\r\n                if (value === \"\") return undefined;\r\n                return +value;\r\n\r\n            case \"string\":\r\n                return value;\r\n\r\n            case \"boolean\":\r\n                if (value === \"true\" || value === \"1\") {\r\n                    return true;\r\n\r\n                } else if (value === \"false\" || value === \"0\") {\r\n                    return false;\r\n                }\r\n\r\n                return !!value;\r\n\r\n            case \"date\":\r\n                const parsedDate = new Date(value);\r\n                if (isNaN(parsedDate.getTime())) {\r\n                    return Promise.reject(new BadRequestError(`${param.name} is invalid! It can't be parsed to date.`));\r\n                }\r\n                return parsedDate;\r\n\r\n            default:\r\n                if (value && (param.parse || param.isTargetObject)) {\r\n                    value = this.parseValue(value, param);\r\n                    value = this.transformValue(value, param);\r\n                    value = this.validateValue(value, param); // note this one can return promise\r\n                }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Parses string value into a JSON object.\r\n     */\r\n    protected parseValue(value: any, paramMetadata: ParamMetadata): any {\r\n        if (typeof value === \"string\") {\r\n            try {\r\n                return JSON.parse(value);\r\n            } catch (error) {\r\n                throw new ParameterParseJsonError(paramMetadata.name, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Perform class-transformation if enabled.\r\n     */\r\n    protected transformValue(value: any, paramMetadata: ParamMetadata): any {\r\n        if (this.driver.useClassTransformer &&\r\n            paramMetadata.targetType &&\r\n            paramMetadata.targetType !== Object &&\r\n            !(value instanceof paramMetadata.targetType)) {\r\n\r\n            const options = paramMetadata.classTransform || this.driver.plainToClassTransformOptions;\r\n            value = plainToClass(paramMetadata.targetType, value, options);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Perform class-validation if enabled.\r\n     */\r\n    protected validateValue(value: any, paramMetadata: ParamMetadata): Promise<any>|any {\r\n        const isValidationEnabled = (paramMetadata.validate instanceof Object || paramMetadata.validate === true)\r\n            || (this.driver.enableValidation === true && paramMetadata.validate !== false);\r\n        const shouldValidate = paramMetadata.targetType\r\n            && (paramMetadata.targetType !== Object)\r\n            && (value instanceof paramMetadata.targetType);\r\n\r\n        if (isValidationEnabled && shouldValidate) {\r\n            const options = paramMetadata.validate instanceof Object ? paramMetadata.validate : this.driver.validationOptions;\r\n            return validate(value, options)\r\n                .then(() => value)\r\n                .catch((validationErrors: ValidationError[]) => {\r\n                    const error: any = new BadRequestError(`Invalid ${paramMetadata.type}, check 'errors' property for more info.`);\r\n                    error.errors = validationErrors;\r\n                    error.paramName = paramMetadata.name; \r\n                    throw error;\r\n                });\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"."}