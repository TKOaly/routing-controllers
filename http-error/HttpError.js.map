{"version":3,"sources":["../../src/http-error/HttpError.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;;GAIG;AACH;IAA+B,6BAAK;IAIhC,mBAAY,QAAgB,EAAE,OAAgB;QAA9C,YACI,iBAAO,SASV;QARG,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;QAEjD,EAAE,CAAC,CAAC,QAAQ,CAAC;YACT,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC7B,EAAE,CAAC,CAAC,OAAO,CAAC;YACR,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAE3B,KAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC;;IACnC,CAAC;IAEL,gBAAC;AAAD,CAhBA,AAgBC,CAhB8B,KAAK,GAgBnC;AAhBY,8BAAS","file":"HttpError.js","sourcesContent":["/**\r\n * Used to throw HTTP errors.\r\n * Just do throw new HttpError(code, message) in your controller action and\r\n * default error handler will catch it and give in your response given code and message .\r\n */\r\nexport class HttpError extends Error {\r\n\r\n    httpCode: number;\r\n\r\n    constructor(httpCode: number, message?: string) {\r\n        super();\r\n        Object.setPrototypeOf(this, HttpError.prototype);\r\n        \r\n        if (httpCode)\r\n            this.httpCode = httpCode;\r\n        if (message)\r\n            this.message = message;\r\n\r\n        this.stack = new Error().stack;\r\n    }\r\n\r\n}"],"sourceRoot":".."}