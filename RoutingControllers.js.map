{"version":3,"sources":["../../src/RoutingControllers.ts"],"names":[],"mappings":"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","file":"RoutingControllers.js","sourcesContent":["import {Action} from \"./Action\";\r\nimport {ActionMetadata} from \"./metadata/ActionMetadata\";\r\nimport {ActionParameterHandler} from \"./ActionParameterHandler\";\r\nimport {BaseDriver} from \"./driver/BaseDriver\";\r\nimport {InterceptorInterface} from \"./InterceptorInterface\";\r\nimport {InterceptorMetadata} from \"./metadata/InterceptorMetadata\";\r\nimport {MetadataBuilder} from \"./metadata-builder/MetadataBuilder\";\r\nimport {RoutingControllersOptions} from \"./RoutingControllersOptions\";\r\nimport {getFromContainer} from \"./container\";\r\nimport {isPromiseLike} from \"./util/isPromiseLike\";\r\nimport {runInSequence} from \"./util/runInSequence\";\r\n\r\n/**\r\n * Registers controllers and middlewares in the given server framework.\r\n */\r\nexport class RoutingControllers<T extends BaseDriver> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Used to check and handle controller action parameters.\r\n     */\r\n    private parameterHandler: ActionParameterHandler<T>;\r\n\r\n    /**\r\n     * Used to build metadata objects for controllers and middlewares.\r\n     */\r\n    private metadataBuilder: MetadataBuilder;\r\n\r\n    /**\r\n     * Global interceptors run on each controller action.\r\n     */\r\n    private interceptors: InterceptorMetadata[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private driver: T, private options: RoutingControllersOptions) {\r\n        this.parameterHandler = new ActionParameterHandler(driver);\r\n        this.metadataBuilder = new MetadataBuilder(options);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Initializes the things driver needs before routes and middleware registration.\r\n     */\r\n    initialize(): this {\r\n        this.driver.initialize();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Registers all given interceptors.\r\n     */\r\n    registerInterceptors(classes?: Function[]): this {\r\n        const interceptors = this.metadataBuilder\r\n            .buildInterceptorMetadata(classes)\r\n            .sort((middleware1, middleware2) => middleware1.priority - middleware2.priority)\r\n            .reverse();\r\n        this.interceptors.push(...interceptors);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Registers all given controllers and actions from those controllers.\r\n     */\r\n    registerControllers(classes?: Function[]): this {\r\n        const controllers = this.metadataBuilder.buildControllerMetadata(classes);\r\n        controllers.forEach(controller => {\r\n            controller.actions.forEach(actionMetadata => {\r\n                const interceptorFns = this.prepareInterceptors([\r\n                    ...this.interceptors,\r\n                    ...actionMetadata.controllerMetadata.interceptors,\r\n                    ...actionMetadata.interceptors\r\n                ]);\r\n                this.driver.registerAction(actionMetadata, (action: Action) => {\r\n                    return this.executeAction(actionMetadata, action, interceptorFns);\r\n                });\r\n            });\r\n        });\r\n        this.driver.registerRoutes();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Registers post-execution middlewares in the driver.\r\n     */\r\n    registerMiddlewares(type: \"before\"|\"after\", classes?: Function[]): this {\r\n        this.metadataBuilder\r\n            .buildMiddlewareMetadata(classes)\r\n            .filter(middleware => middleware.global && middleware.type === type)\r\n            .sort((middleware1, middleware2) => middleware2.priority - middleware1.priority)\r\n            .forEach(middleware => this.driver.registerMiddleware(middleware));\r\n\r\n        return this;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes given controller action.\r\n     */\r\n    protected executeAction(actionMetadata: ActionMetadata, action: Action, interceptorFns: Function[]) {\r\n\r\n        // compute all parameters\r\n        const paramsPromises = actionMetadata.params\r\n            .sort((param1, param2) => param1.index - param2.index)\r\n            .map(param => this.parameterHandler.handle(action, param));\r\n\r\n        // after all parameters are computed\r\n        return Promise.all(paramsPromises).then(params => {\r\n\r\n            // execute action and handle result\r\n            const allParams = actionMetadata.appendParams ? actionMetadata.appendParams(action).concat(params) : params;\r\n            const result = actionMetadata.methodOverride ? actionMetadata.methodOverride(actionMetadata, action, allParams) : actionMetadata.callMethod(allParams);\r\n            return this.handleCallMethodResult(result, actionMetadata, action, interceptorFns);\r\n\r\n        }).catch(error => {\r\n\r\n            // otherwise simply handle error without action execution\r\n            return this.driver.handleError(error, actionMetadata, action);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles result of the action method execution.\r\n     */\r\n    protected handleCallMethodResult(result: any, action: ActionMetadata, options: Action, interceptorFns: Function[]): any {\r\n        if (isPromiseLike(result)) {\r\n            return result\r\n                .then((data: any) => {\r\n                    return this.handleCallMethodResult(data, action, options, interceptorFns);\r\n                })\r\n                .catch((error: any) => {\r\n                    return this.driver.handleError(error, action, options);\r\n                });\r\n        } else {\r\n\r\n            if (interceptorFns) {\r\n                const awaitPromise = runInSequence(interceptorFns, interceptorFn => {\r\n                    const interceptedResult = interceptorFn(options, result);\r\n                    if (isPromiseLike(interceptedResult)) {\r\n                        return interceptedResult.then((resultFromPromise: any) => {\r\n                            result = resultFromPromise;\r\n                        });\r\n                    } else {\r\n                        result = interceptedResult;\r\n                        return Promise.resolve();\r\n                    }\r\n                });\r\n\r\n                return awaitPromise\r\n                    .then(() => this.driver.handleSuccess(result, action, options))\r\n                    .catch(error => this.driver.handleError(error, action, options));\r\n            } else {\r\n                return this.driver.handleSuccess(result, action, options);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Creates interceptors from the given \"use interceptors\".\r\n     */\r\n    protected prepareInterceptors(uses: InterceptorMetadata[]): Function[] {\r\n        return uses.map(use => {\r\n            if (use.interceptor.prototype && use.interceptor.prototype.intercept) { // if this is function instance of InterceptorInterface\r\n                return function (action: Action, result: any) {\r\n                    return (getFromContainer(use.interceptor) as InterceptorInterface).intercept(action, result);\r\n                };\r\n            }\r\n            return use.interceptor;\r\n        });\r\n    }\r\n\r\n\r\n}\r\n"],"sourceRoot":"."}